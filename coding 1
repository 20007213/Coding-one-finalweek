<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>finalworks</title>
    <!-- threejs library -->
    <script src="https://cdn.bootcdn.net/ajax/libs/three.js/r123/three.js"></script>
    <!-- A library for monitoring status -->
    <script src="stats.min.js"></script>
    <!-- A library to control the perspective -->
    <script src="orbitControls.js"></script>
    <!-- Grid Intersection and Difference Set Library -->
    <script src="THREE.CSG.js"></script>
    <!-- A library of particles -->
    <script src="SPE.min.js"></script>
    <!-- Shader file -->
    <script src="shader.js"></script>
    <!-- Several main class definition files -->
    <script src="classes.js"></script>
    <style>
      html,
      body {
        width: 100%;
        height: 100%;
        margin: 0;
        padding: 0;
        background-color: #fff;
        overflow: hidden;
      }
      canvas {
        width: 100%;
        height: 100%;
      }
    </style>
  </head>
  <body>
    <!-- s4 pixel processing and image processing -->
    <!-- s7GLSL Shader Part 1 -->
    <!-- s8GLSL shader part 2 -->
    <script>
      let scene = null;
      window.onload = init;
      function init() {
        // Use body as a drawing container
        const container = document.body;
        // three clock plugin
        const clock = new THREE.Clock();
        // container width and height
        const width = window.innerWidth;
        const height = window.innerHeight;
        let delta = 0;
        // Plug-in to monitor performance
        const stats = new Stats();
        // add to the page
        container.appendChild(stats.dom);
        // instantiate the scene
        scene = new THREE.Scene();
        // Instantiate the renderer, antialias turns on antialiasing
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        // Set the pixel ratio
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        // Define the output encoding of the renderer, gamma correction
        renderer.outputEncoding = THREE.GammaEncoding;
        // turn on the shadow
        renderer.shadowMap.enabled = true;
        // Generate softer shadows
        renderer.shadowMap.type = THREE.PCFShadowMap;
        // Add the renderer to the page
        container.appendChild(renderer.domElement);
        // Instantiate the camera and set the position of the camera
        const camera = new THREE.PerspectiveCamera(
          60,
          width / height,
          0.1,
          500
        );
        camera.position.set(-2, 1, -4);
        // Add a monitoring function for window changes, change camera parameters in real time, etc.
        window.addEventListener("resize", (e) => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        });
        // Add a track controller to obtain functions such as rotating, zooming, and moving perspective
        const controls = new THREE.OrbitControls(camera, renderer.domElement);
        // Set the parameters of the controller
        // Dynamic damping coefficient is the sensitivity of mouse drag rotation
        controls.enableDamping = true;
        controls.dampingFactor = 0.1;
        // spinning speed
        controls.rotateSpeed ​​= 0.25;
        //Focus coordinates
        controls.target.set(0, 0.7, 0);
        // Limit the range of lens movement
        controls.maxPolarAngle = (1.03 * Math.PI) / 2;
        controls.minDistance = 2;
        controls.maxDistance = 9;
        controls.update();
        // Generate smoke particles and snowflake particles to simulate smoke and snow
        const particles1 = new smockParticles(scene);
        const particles2 = new snowParticles(scene);
        // Native sky box, gradual sky
        const uniforms = {
          topColor: {value: new THREE.Color(0xaabbff) },
          bottomColor: {value: new THREE.Color(0xffffff) },
          offset: {value: 50 },
          exponent: {value: 0.6 },
        };
        const skyGeo = new THREE.SphereBufferGeometry(400, 32, 15);
        const skyMat = new THREE.ShaderMaterial({
          uniforms: uniforms,
          vertexShader: skyVertexShader,
          fragmentShader: skyFragmentShader,
          side: THREE.BackSide,
        });

        const sky = new THREE.Mesh(skyGeo, skyMat);
        scene.add(sky);
        // Add fog effect, the color is the same as the bottom color of the sky
        scene.fog = new THREE.Fog(skyMat.uniforms.bottomColor.value, 1, 15);

        // Add light source
        // HemisphereLight can create outdoor lighting effects closer to nature
        var hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);
        hemiLight.color.setHSL(0.6, 1, 0.6);
        hemiLight.groundColor.setHSL(0.095, 0.8, 0.5);
        hemiLight.position.set(0, 5, 0);
        scene.add(hemiLight);
        // add a directional light
        var dirLight = new THREE.DirectionalLight(0xffffff, 1);
        dirLight.color.setHSL(0.6, 0.1, 1);
        dirLight.position.set(-1, 1.75, -1);
        // zoom in 5 times
        dirLight.position.multiplyScalar(5);
        scene.add(dirLight);
        // Generate shadow
        dirLight.castShadow = true;
        var d = 2;
        // Add a point light source
        var pointLight = new THREE.PointLight(0xffff55, 3);
        pointLight.distance = 1.5;
        pointLight.position.set(0, 0.4, 0);
        scene.add(pointLight);
        // instantiate a material loader
        const textureLoader = new THREE.TextureLoader();
        const texture1 = textureLoader.load("texture1.jpg");
        const boxInside = new THREE.Mesh(
          new THREE.BoxBuffe
          new THREE.BoxBufferGeometry(0.2, 0.1, 0.01),
           new THREE.MeshLambertMaterial({ map: texture1 })
         );
         // add a bouncing box
         boxInside.position.set(0, 0.3, -0.1);
         let grow = 0;
         boxInside.userData.update = function (delta) {
           grow += delta;
           boxInside.position.y = 0.3 + Math.sin(grow * 2) / 20;
           boxInside.rotation.z = 0.0 + Math.cos(grow) / 2;
         };
         scene.add(boxInside);
        
         // add the red house
         new House(scene);

         function update(delta) {
           particles1.update(delta);
           particles2.update(delta);
           controls.update();
           boxInside.userData.update(delta);
           stats.update();
         }

         function animate() {
           delta = clock.getDelta();
           update(delta);
           renderer.render(scene, camera);
           requestAnimationFrame(animate);
         }
         animate();
       }
     </script>
   </body>
</html>
